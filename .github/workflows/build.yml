name: Build
run-name: "Branch Build (${{ github.run_attempt }}.${{ github.run_number }}) - ${{ github.ref_name }}"

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      build-type:
        required: false
        type: string
      optional-release-tag:
        required: false
        type: string

defaults:
  run:
    shell: bash

jobs:

  metadata:
    uses: howsoai/.github/.github/workflows/set-metadata.yml@main
    secrets: inherit
    with:
      build-type: ${{ inputs.build-type }}
      optional-release-tag: ${{ inputs.optional-release-tag }}

  build:
    needs: ["metadata"]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install cibuildwheel
      run: >-
        python3 -m
        pip install
        cibuildwheel==2.15.0
        build

    - name: Build wheels
      run: |
        python3 -m build --wheel --outdir wheelhouse/ .
        mkdir -p dist/
        mv wheelhouse/*.whl dist/howso_engine_no_telemetry-${{ needs.metadata.outputs.version }}-py3-none-any.whl
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.metadata.outputs.version }}

    - name: Build tarball
      run: |
        python3 -m build --sdist --outdir dist/ .
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.metadata.outputs.version }}

    - name: Upload Tarball Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "howso-engine-no-telemetry-${{ needs.metadata.outputs.version }}"
        path: "dist/howso-engine-no-telemetry-${{ needs.metadata.outputs.version }}.tar.gz"
        if-no-files-found: error

    - name: Upload Wheel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "howso_engine_no_telemetry-${{ needs.metadata.outputs.version }}-py3-none-any"
        path: "dist/howso_engine_no_telemetry-${{ needs.metadata.outputs.version }}-py3-none-any.whl"
        if-no-files-found: error

  release:
    needs: ["metadata", "build"]
    if: inputs.build-type == 'release'
    environment:
      name: pypi
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./tmp

      - name: Clean up dir
        run: |
          mkdir -p dist
          find ./tmp -type f -name '*.whl' -exec cp -t ./dist {} +
          find ./tmp -type f -name '*.tar.gz' -exec cp -t ./dist {} +
          ls ./dist

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.metadata.outputs.version }}
          commit: ${{ github.sha }}
          name: "${{ github.event.repository.name }} ${{ needs.metadata.outputs.version }}"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          makeLatest: legacy
          artifacts: "dist/*"
          artifactContentType: application/gzip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1