#!/bin/bash
#
# Build functions for the repository - predominantly used by build pipelines, to keep specific build logic output of pipeline yml files
# allowing control of build functions, outside of the generic build templates.
#
# usage: ./bin/build.sh <build-function> {params}
#
#####

source config/build.properties
# set -x
set -eu # fail on error, and undefined var usage

# Updates the appropriate version file (defined in build.properties)
update_version() {
  new_version=$1
  echo "Updating version to $new_version"
  sed -i "s/__version__ = \(.*\)/__version__ = \"$new_version\"/" ${version_file}
  cat ${version_file}
}

# Logic for getting version information from appropriate .py file
get_version() {
  cat ${version_file} | grep '^__version__' | sed 's/.*\=\(.*\)/\1/' | tr -d '"' | tr -d '[:space:]'
}

# Used by Azure Devops Pipelines to set appropriate git config, for checking in files/tags
setup_git() {
  branchName=${1}
  git config --global user.email "devops@howso.com"
  git config --global user.name "azuredevops"
  git checkout $branchName
}

# Used by Azure Devops Pipelines to add the version update back into git
git_add_version() {
  git add ${version_file}
}




# Install dependencies
install_deps() {
  local pyversion=${1}
  echo $pyversion
  # --force-reinstall fixes an occasional bad installation of pip by Azure Devops, when it adds the python libraries into a container
  python -m pip install -U --force-reinstall pip
  python --version
  pip --version
  # Need to avoid building source, for speed, and avoiding build dependency errors - so force wheels, except where required
  # Note - when hashes included, behavior of --prefer-binary still used sdist, when wheels available
  pip install --prefer-binary -r requirements-${pyversion}.txt
}

# Install additional test time dependencies
install_test_deps() {
  local pyversion=${1}
  pip install --prefer-binary -r requirements-dev-${pyversion}.txt
}

# Run pytest
test() {
  local loglevel=${1:-INFO}
  # For now doctest removed, as they are not well structured for testing
  HOWSO_CONFIG=${HOWSO_CONFIG:-./config/latest-st-howo.yml} pytest -s --log-cli-level=${loglevel} -o junit_family=xunit2 --cov-report term --cov=${source_root_dir} --junitxml=junit/test-results.xml --cov-report=xml
}

# Generate requirements.txt
# Requires pip-tools - `pip install pip-tools`
gen_requirements() {
  local pyversion=${1}
  echo $pyversion
  rm -fv requirements-${pyversion}.txt
  rm -fv requirements-dev-${pyversion}.txt
  # https://github.com/jazzband/pip-tools/issues/973 describes use of --allow-unsafe
  CUSTOM_COMPILE_COMMAND="./bin/build.sh gen_requirements $pyversion" pip-compile --resolver=backtracking --upgrade requirements.in --no-emit-index-url --allow-unsafe --output-file requirements-${pyversion}.txt
  # Adds appropriate reference to newly created requirements-3.x.in to the requirements.dev.in
  echo -c "requirements-${pyversion}.txt" | cat - requirements-dev.in > "requirements-dev-${pyversion}.in"
  CUSTOM_COMPILE_COMMAND="./bin/build.sh gen_requirements $pyversion" pip-compile --resolver=backtracking --upgrade requirements-dev-${pyversion}.in --no-emit-index-url --output-file requirements-dev-${pyversion}.txt
  # Removes temporary file.
  rm -fv "requirements-dev-${pyversion}.in"
  echo "$(echo '# NOTE - this file is automatically generated during CICD builds, do not update manually' | cat - requirements-${pyversion}.txt)" > requirements-${pyversion}.txt
  echo "$(echo '# NOTE - this file is automatically generated during CICD builds, do not update manually' | cat - requirements-dev-${pyversion}.txt)" > requirements-dev-${pyversion}.txt
}

# Install python modules required for building
install_build_deps() {
  pip install twine wheel
}

# Create license file
gen_licenses() {
  pip install pip-licenses
  pip-licenses --with-authors --with-urls --with-license-file --with-description --format=plain-vertical  > ./LICENSE-3RD-PARTY.txt
  # Include any additional non-generated licenses
  if [ -f LICENSE-3RD-PARTY-EXTRA.txt ]; then
    cat LICENSE-3RD-PARTY-EXTRA.txt >> LICENSE-3RD-PARTY.txt
  fi

}

# Run pylint analysis
run_pylint() {
  # Note - the formatting here allows azure devops to process the build issues
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#example-log-an-error
  pylint ${source_root_dir} --exit-zero --msg-template='##vso[task.logissue linenumber={line};columnnumber={column};code={msg_id};sourcepath={path};type=warning;] {category} - {obj} {msg}'
}

# Run flake8 linter
run_flake8() {
  # Note - the formatting here allows azure devops to process the build issues
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#example-log-an-error
  flake8 --exit-zero --format='##vso[task.logissue linenumber=%(row)d;columnnumber=%(col)d;code=%(code)s;sourcepath=%(path)s;type=warning;]%(text)s' ${source_root_dir}
}

# Build the package
build() {
  # Builds a source distribution and a universal wheel
  python setup.py sdist bdist_wheel
}

# Upload to artifactory - Note, this is utility for testing - actual uploading is from an Azure Devops Artifactory task
## relies on a file at ~/.pypirc
##
#[distutils]
#index-servers =
#  local
#  pypi
#[local]
#repository: https://dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge
#username:
#password:
#[pypi]
#username = __token__
#password = <pypi-api-token>

_upload() {
  local repo=${1:-local}
  twine upload -r ${repo} dist/*
}


clean() {
  rm -rf build dist *.egg-info
  rm -rf .pytest_cache
  rm -rf .coverage
  rm -rf junit
  rm -rf htmlcov
  rm -rf .eggs
}


# Show usage, and print functions
help() {
  echo "usage: ./bin/build.sh <build-function> {params}"
  echo " where <build-function> one of :-"
  IFS=$'\n'
  for f in $(declare -F); do
    echo "    ${f:11}"
  done
}

# Takes the cli params, and runs them, defaulting to 'help()'
if [ ! ${1:-} ]; then
  help
else
  "$@"
fi
